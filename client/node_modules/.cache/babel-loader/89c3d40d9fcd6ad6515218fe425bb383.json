{"ast":null,"code":"import _classCallCheck from \"/home/uusi2/sipuliton4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/uusi2/sipuliton4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/uusi2/sipuliton4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/uusi2/sipuliton4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/uusi2/sipuliton4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/uusi2/sipuliton4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/uusi2/sipuliton4/sipuliton/client/src/modules/forgotpassword/components/ForgotPassword_Form.js\";\n\n/*\nThis file implements forgot password form functionality. In this file is\nimplemented forgot password code sending to user's email and after that show\npassword changing objects to the user. In password changing user can change\npassword to account with sended code.\n*/\nimport React from 'react';\nimport { form } from 'reactstrap';\nimport { Auth } from \"aws-amplify\";\nimport { Redirect } from \"react-router-dom\";\n/* Configuration files */\n\nimport config from \"../../../config.js\";\n/*\n ForgotPassword_Form class which implements all needed things for the password\n changing.\n*/\n\nvar ForgotPassword_Form =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ForgotPassword_Form, _React$Component);\n\n  function ForgotPassword_Form(props) {\n    var _this;\n\n    _classCallCheck(this, ForgotPassword_Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ForgotPassword_Form).call(this, props));\n\n    _this.sendCode = function (event) {\n      event.preventDefault();\n\n      if (_this.state.usernameIsValid) {\n        /* Implements forgot password code sending. */\n        Auth.forgotPassword(_this.state.username).then(function (data) {\n          console.log(data);\n\n          _this.setState({\n            codeSentSuccesfully: true,\n            email: data.CodeDeliveryDetails.Destination,\n            codeSendingFailed: false\n          });\n        }).catch(function (err) {\n          /* Exception when code is sent too many times in a short time period.*/\n          if (err.code === \"LimitExceededException\") {\n            _this.setState({\n              limitExceeded: true,\n              codeSendingFailed: false\n            });\n          } else {\n            _this.setState({\n              limitExceeded: false,\n              codeSendingFailed: true\n            });\n          }\n        });\n      } else {\n        _this.setState({\n          codeSendingFailed: true\n        });\n      }\n    };\n\n    _this.changePassword = function (event) {\n      event.preventDefault();\n\n      if (_this.state.passwordsMatch && _this.state.codeIsValid && _this.state.newPasswordIsValid && _this.state.newPasswordAgainIsValid) {\n        /* Changes user password for the user. */\n        Auth.forgotPasswordSubmit(_this.state.username, _this.state.code, _this.state.newPassword).then(function (data) {\n          _this.setState({\n            passwordChangedSuccesfully: true\n          });\n\n          alert(\"Salasana vaihdettu onnistuneesti!\");\n        }).catch(function (err) {\n          return _this.setState({\n            passwordChangedSuccesfully: false,\n            passwordChangingFailed: true\n          });\n        });\n      } else {\n        _this.setState({\n          passwordChangedSuccesfully: false,\n          passwordChangingFailed: true\n        });\n      }\n    };\n\n    _this.changeCode = function (event) {\n      if (event.target.value.length >= config.login.CODE_MIN_LENGTH && event.target.value.length <= config.login.CODE_MAX_LENGTH) {\n        _this.setState({\n          code: event.target.value,\n          codeIsValid: true\n        });\n      } else {\n        _this.setState({\n          code: event.target.value,\n          codeIsValid: false\n        });\n      }\n    };\n\n    _this.changeUsername = function (event) {\n      if (event.target.value.length >= config.login.USERNAME_MIN_LENGTH && event.target.value.length <= config.login.USERNAME_MAX_LENGTH) {\n        _this.setState({\n          username: event.target.value,\n          usernameIsValid: true\n        });\n      } else {\n        _this.setState({\n          username: event.target.value,\n          usernameIsValid: false\n        });\n      }\n    };\n\n    _this.changeNewPassword = function (event) {\n      if (event.target.value.length >= config.login.PASSWORD_MIN_LENGTH && event.target.value.length <= config.login.PASSWORD_MAX_LENGTH) {\n        _this.setState({\n          newPassword: event.target.value,\n          newPasswordIsValid: true\n        });\n      } else {\n        _this.setState({\n          newPassword: event.target.value,\n          newPasswordIsValid: false\n        });\n      }\n    };\n\n    _this.changeNewPasswordAgain = function (event) {\n      /*Implement validation of password*/\n      if (event.target.value === _this.state.newPassword) {\n        _this.setState({\n          newPasswordAgain: event.target.value,\n          passwordsMatch: true\n        });\n      } else {\n        _this.setState({\n          newPasswordAgain: event.target.value,\n          passwordsMatch: false\n        });\n      }\n\n      if (event.target.value.length >= config.login.PASSWORD_MIN_LENGTH && event.target.value.length <= config.login.PASSWORD_MAX_LENGTH) {\n        _this.setState({\n          newPasswordAgainIsValid: true\n        });\n      } else {\n        _this.setState({\n          newPasswordAgainIsValid: false\n        });\n      }\n    };\n\n    _this.state = {\n      username: \"\",\n      newPassword: \"\",\n      newPasswordAgain: \"\",\n      code: \"\",\n      codeSentSuccesfully: false,\n      passwordChangedSuccesfully: false,\n      passwordsMatch: false,\n      codeSendingFailed: false,\n      email: \"\",\n      limitExceeded: false,\n      codeIsValid: true,\n      usernameIsValid: true,\n      newPasswordIsValid: true,\n      newPasswordAgainIsValid: true\n    };\n    _this.sendCodeAgain = _this.sendCodeAgain.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /*\n  Returns all states back to normal after user decides to send code again. This\n  method is called when user clicks send code again button.\n  */\n\n\n  _createClass(ForgotPassword_Form, [{\n    key: \"sendCodeAgain\",\n    value: function sendCodeAgain() {\n      this.setState({\n        email: \"\",\n        newPassword: \"\",\n        newPasswordAgain: \"\",\n        code: \"\",\n        codeSentSuccesfully: false,\n        passwordChangedSuccesfully: false,\n        passwordsMatch: false,\n        passwordChangingFailed: false,\n        limitExceeded: false,\n        codeIsValid: true,\n        usernameIsValid: true,\n        newPasswordIsValid: true,\n        newPasswordAgainIsValid: true\n      });\n    }\n    /*\n    This method implements password changing code to the user's email.\n    This method is called when user clicks send code button.\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      /* Password fields border colors. Borders are red until passwords matches.*/\n      var passwordBorder = {\n        'borderStyle': 'solid solid solid solid',\n        'borderColor': 'black'\n      };\n\n      if (!this.state.passwordsMatch) {\n        passwordBorder = {\n          'borderStyle': 'solid solid solid solid',\n          'borderColor': 'red'\n        };\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, this.state.codeSendingFailed && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"K\\xE4ytt\\xE4j\\xE4\\xE4 ei l\\xF6ydy tai k\\xE4ytt\\xE4j\\xE4nimi ei ole validi.\"), this.state.limitExceeded && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"L\\xE4hetit koodin liian monta kertaa, yrit\\xE4 my\\xF6hemmin uudelleen\"), !this.state.codeSentSuccesfully && React.createElement(\"form\", {\n        onSubmit: this.sendCode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"K\\xE4ytt\\xE4j\\xE4nimi: \", React.createElement(\"input\", {\n        className: \"input\",\n        value: this.state.username,\n        onChange: this.changeUsername,\n        type: \"text\",\n        name: \"username\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"L\\xE4het\\xE4 koodi\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })), this.state.passwordChangingFailed && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"Salasanan vaihto ei onnistunut, salasana tai koodi ei ole validi.\"), this.state.codeSentSuccesfully && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \"Koodi l\\xE4hetetty s\\xE4hk\\xF6postilla osoitteeseen: \", this.state.email), React.createElement(\"form\", {\n        onSubmit: this.changePassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \"Uusi salasana: \", React.createElement(\"input\", {\n        className: \"input\",\n        value: this.state.newPassword,\n        onChange: this.changeNewPassword,\n        type: \"password\",\n        name: \"password\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), \"Uusi salasana uudelleen: \", React.createElement(\"input\", {\n        className: \"input\",\n        style: passwordBorder,\n        value: this.state.newPasswordAgain,\n        onChange: this.changeNewPasswordAgain,\n        type: \"password\",\n        name: \"password\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), \"Koodi: \", React.createElement(\"input\", {\n        className: \"input\",\n        value: this.state.code,\n        onChange: this.changeCode,\n        type: \"text\",\n        name: \"password\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Vaihda salasana\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.sendCodeAgain,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \"L\\xE4het\\xE4 koodi uudelleen\")), this.state.passwordChangedSuccesfully && React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ForgotPassword_Form;\n}(React.Component);\n\nexport { ForgotPassword_Form as default };","map":{"version":3,"sources":["/home/uusi2/sipuliton4/sipuliton/client/src/modules/forgotpassword/components/ForgotPassword_Form.js"],"names":["React","form","Auth","Redirect","config","ForgotPassword_Form","props","sendCode","event","preventDefault","state","usernameIsValid","forgotPassword","username","then","data","console","log","setState","codeSentSuccesfully","email","CodeDeliveryDetails","Destination","codeSendingFailed","catch","err","code","limitExceeded","changePassword","passwordsMatch","codeIsValid","newPasswordIsValid","newPasswordAgainIsValid","forgotPasswordSubmit","newPassword","passwordChangedSuccesfully","alert","passwordChangingFailed","changeCode","target","value","length","login","CODE_MIN_LENGTH","CODE_MAX_LENGTH","changeUsername","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","changeNewPassword","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","changeNewPasswordAgain","newPasswordAgain","sendCodeAgain","bind","passwordBorder","Component"],"mappings":"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","sourcesContent":["/*\nThis file implements forgot password form functionality. In this file is\nimplemented forgot password code sending to user's email and after that show\npassword changing objects to the user. In password changing user can change\npassword to account with sended code.\n*/\n\nimport React from 'react';\nimport {\n  form,\n} from 'reactstrap';\nimport { Auth } from \"aws-amplify\";\nimport { Redirect } from \"react-router-dom\";\n\n/* Configuration files */\nimport config from \"../../../config.js\"\n\n/*\n ForgotPassword_Form class which implements all needed things for the password\n changing.\n*/\nexport default class ForgotPassword_Form extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      username:\"\",\n      newPassword:\"\",\n      newPasswordAgain:\"\",\n      code:\"\",\n      codeSentSuccesfully: false,\n      passwordChangedSuccesfully:false,\n      passwordsMatch: false,\n      codeSendingFailed: false,\n      email:\"\",\n      limitExceeded:false,\n      codeIsValid:true,\n      usernameIsValid:true,\n      newPasswordIsValid:true,\n      newPasswordAgainIsValid:true\n\n    };\n    this.sendCodeAgain = this.sendCodeAgain.bind(this);\n  }\n\n  /*\n  Returns all states back to normal after user decides to send code again. This\n  method is called when user clicks send code again button.\n  */\n  sendCodeAgain(){\n    this.setState({\n      email:\"\",\n      newPassword:\"\",\n      newPasswordAgain:\"\",\n      code:\"\",\n      codeSentSuccesfully: false,\n      passwordChangedSuccesfully:false,\n      passwordsMatch: false,\n      passwordChangingFailed: false,\n      limitExceeded:false,\n      codeIsValid:true,\n      usernameIsValid:true,\n      newPasswordIsValid:true,\n      newPasswordAgainIsValid:true\n    })\n  }\n\n  /*\n  This method implements password changing code to the user's email.\n  This method is called when user clicks send code button.\n  */\n  sendCode = (event) => {\n      event.preventDefault();\n      if(this.state.usernameIsValid){\n        /* Implements forgot password code sending. */\n        Auth.forgotPassword(this.state.username)\n          .then(data => {\n            console.log(data);\n            this.setState({\n              codeSentSuccesfully: true,\n              email:data.CodeDeliveryDetails.Destination,\n              codeSendingFailed:false\n            });\n          })\n          .catch(err => {\n            /* Exception when code is sent too many times in a short time period.*/\n            if(err.code === \"LimitExceededException\"){\n              this.setState({\n                limitExceeded:true,\n                codeSendingFailed:false\n              });\n            }\n            else{\n              this.setState({\n                limitExceeded:false,\n                codeSendingFailed:true\n              });\n            }\n          });\n      }\n      else{\n        this.setState({\n          codeSendingFailed:true\n        });\n      }\n\n  }\n\n  /*\n  Method which implements password changing for the user. This method is\n  ran when user clicks change password button.\n  */\n  changePassword = (event) => {\n    event.preventDefault();\n    if(this.state.passwordsMatch && this.state.codeIsValid\n      && this.state.newPasswordIsValid && this.state.newPasswordAgainIsValid){\n      /* Changes user password for the user. */\n      Auth.forgotPasswordSubmit(\n        this.state.username,\n        this.state.code,\n        this.state.newPassword\n      )\n        .then(data => {\n          this.setState({passwordChangedSuccesfully: true});\n          alert(\"Salasana vaihdettu onnistuneesti!\");\n        })\n        .catch(err => this.setState({\n                passwordChangedSuccesfully:false,\n                passwordChangingFailed: true\n              }));\n    }\n    else{\n      this.setState({\n        passwordChangedSuccesfully:false,\n        passwordChangingFailed: true\n      });\n    }\n\n  }\n\n  /*\n  This method implements code validation. This only checks that code is not\n  too short or too long. Lenghts are read from config.js file.\n  */\n  changeCode = (event) => {\n    if(event.target.value.length >= config.login.CODE_MIN_LENGTH\n      && event.target.value.length <= config.login.CODE_MAX_LENGTH){\n      this.setState({code: event.target.value, codeIsValid: true });\n    }\n    else{\n        this.setState({code: event.target.value, codeIsValid: false });\n    }\n  }\n\n  /*\n  This method implements username validation. This only checks that username is\n  not too short or too long. Lenghts are read from config.js file.\n  */\n  changeUsername = (event) => {\n    if(event.target.value.length >= config.login.USERNAME_MIN_LENGTH\n      && event.target.value.length <= config.login.USERNAME_MAX_LENGTH){\n      this.setState({username: event.target.value, usernameIsValid: true });\n    }\n    else{\n        this.setState({username: event.target.value, usernameIsValid: false });\n    }\n  }\n\n  /*\n  This method implements new password validation. This only checks that password\n  is not too short or too long. Lenghts are read from config.js file.\n  */\n  changeNewPassword = (event) => {\n    if(event.target.value.length >= config.login.PASSWORD_MIN_LENGTH\n      && event.target.value.length <= config.login.PASSWORD_MAX_LENGTH){\n        this.setState({ newPassword: event.target.value, newPasswordIsValid: true });\n    }\n    else{\n        this.setState({newPassword: event.target.value, newPasswordIsValid: false });\n    }\n  }\n\n  /*\n  This method implements second new password validation. This only checks that\n  password is not too short or too long. Lenghts are read from config.js file.\n  */\n  changeNewPasswordAgain = (event) => {\n    /*Implement validation of password*/\n    if(event.target.value === this.state.newPassword){\n      this.setState({\n        newPasswordAgain: event.target.value,\n        passwordsMatch:true\n      });\n    }\n    else{\n      this.setState({\n        newPasswordAgain: event.target.value,\n        passwordsMatch:false\n      });\n    }\n    if(event.target.value.length >= config.login.PASSWORD_MIN_LENGTH\n      && event.target.value.length <= config.login.PASSWORD_MAX_LENGTH){\n        this.setState({newPasswordAgainIsValid: true });\n    }\n    else{\n        this.setState({newPasswordAgainIsValid: false });\n    }\n\n  }\n\n  render(){\n\n    /* Password fields border colors. Borders are red until passwords matches.*/\n    var passwordBorder = {\n      'borderStyle': 'solid solid solid solid',\n      'borderColor': 'black'\n    };\n    if(!this.state.passwordsMatch){\n      passwordBorder = {\n        'borderStyle': 'solid solid solid solid',\n        'borderColor': 'red'\n      };\n    }\n\n    return (\n      <div>\n        {this.state.codeSendingFailed && <div>Käyttäjää ei löydy tai käyttäjänimi ei ole validi.</div>}\n        {this.state.limitExceeded && <div>Lähetit koodin liian monta kertaa, yritä myöhemmin uudelleen</div>}\n        {!this.state.codeSentSuccesfully &&\n          <form onSubmit={this.sendCode}>\n            Käyttäjänimi: <input className=\"input\" value={this.state.username} onChange={this.changeUsername} type=\"text\" name=\"username\" required />\n            <input type=\"submit\" value=\"Lähetä koodi\" />\n          </form>\n        }\n        {this.state.passwordChangingFailed &&\n          <div>\n            Salasanan vaihto ei onnistunut, salasana tai koodi ei ole validi.\n          </div>\n        }\n        {this.state.codeSentSuccesfully &&\n\n          <div>\n            <p>Koodi lähetetty sähköpostilla osoitteeseen: {this.state.email}</p>\n            <form onSubmit={this.changePassword}>\n              Uusi salasana: <input className=\"input\" value={this.state.newPassword} onChange={this.changeNewPassword} type=\"password\" name=\"password\" required />\n              Uusi salasana uudelleen: <input className=\"input\" style={passwordBorder} value={this.state.newPasswordAgain} onChange={this.changeNewPasswordAgain} type=\"password\" name=\"password\" required />\n              Koodi: <input className=\"input\" value={this.state.code} onChange={this.changeCode} type=\"text\" name=\"password\" required />\n              <input type=\"submit\" value=\"Vaihda salasana\"/>\n            </form>\n            <button onClick={this.sendCodeAgain}>Lähetä koodi uudelleen</button>\n          </div>\n        }\n\n        {this.state.passwordChangedSuccesfully && <Redirect to=\"/login\" />}\n\n      </div>\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}