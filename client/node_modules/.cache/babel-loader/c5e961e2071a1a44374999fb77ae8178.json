{"ast":null,"code":"import _classCallCheck from \"/home/uusi/front4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/uusi/front4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/uusi/front4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/uusi/front4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/uusi/front4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/uusi/front4/sipuliton/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/uusi/front4/sipuliton/client/src/modules/login/components/Social_Login.js\";\n\n/*\n  This file handles social logins. It covers both facebook and google.\n  It presents the buttons, allows user to log in, authenticates the user \n  and if the user exists, logs them in.\n*/\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport '../../../styles/login.css';\nimport { Auth } from \"aws-amplify\";\nimport GoogleLogin from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login';\nimport LocalizedStrings from 'react-localization';\nimport config from \"../../../config.js\"; //Login for Google accounts\n\nvar SocialLogin =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SocialLogin, _React$Component);\n\n  function SocialLogin(props) {\n    var _this;\n\n    _classCallCheck(this, SocialLogin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SocialLogin).call(this, props));\n    _this.state = {\n      username: \"\",\n      password: \"\",\n      loggingFailed: false,\n      loggingSucceeded: false\n    };\n    _this.responseFailure = _this.responseFailure.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.responseGoogle = _this.responseGoogle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.responseFacebookSuccess = _this.responseFacebookSuccess.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //What to do in case of successful response from Google\n\n\n  _createClass(SocialLogin, [{\n    key: \"responseGoogle\",\n    value: function responseGoogle(response) {\n      var _this2 = this;\n\n      console.log(\"DEBUG: RESPONSE FROM GOOGLE ON SUCCESS\");\n      console.log(response);\n      var that = this; //const googleID = response.googleId; //Might not need this    \n\n      var token = response.tokenObj.id_token;\n      var expires = response.tokenObj.expires_at;\n      console.log(\"IMPORTANT DATA:\");\n      console.log(\"TOKEN: \" + token);\n      console.log(\"EXPIRES: \" + expires); //Authenticate at Cognito\n\n      Auth.federatedSignIn('google', {\n        token: token,\n        expires_at: expires\n      }, {\n        name: \"USER_NAME\"\n      }).then(function (credentials) {\n        console.log(\"Auth.federatedSignIn SUCCESS\");\n        console.log('get aws credentials', credentials);\n\n        _this2.setState({\n          loggingSucceeded: true\n        });\n      }).catch(function (e) {\n        //this.setState({loggingFailed:true});\n        console.log(\"Auth.federatedSignIn ERROR\");\n        console.log(e);\n\n        _this2.setState({\n          loggingFailed: true\n        });\n      });\n    } //What to do in case of successful response from Facebook\n\n  }, {\n    key: \"responseFacebookSuccess\",\n    value: function responseFacebookSuccess(response) {\n      var _this3 = this;\n\n      console.log(\"DEBUG: RESPONSE FROM FACEBOOK ON SUCCESS\");\n      console.log(response);\n      var token = response.accessToken;\n      var expires = response.expiresIn;\n      console.log(\"IMPORTANT DATA:\");\n      console.log(\"TOKEN: \" + token);\n      console.log(\"EXPIRES: \" + expires);\n      Auth.federatedSignIn('facebook', {\n        token: token,\n        expires_at: expires\n      }, {\n        name: \"USER_NAME\"\n      }).then(function (credentials) {\n        console.log(\"Auth.federatedSignIn SUCCESS\");\n        console.log('get aws credentials', credentials);\n\n        _this3.setState({\n          loggingSucceeded: true\n        });\n      }).catch(function (e) {\n        //this.setState({loggingFailed:true});\n        console.log(\"Auth.federatedSignIn ERROR\");\n        console.log(e);\n\n        _this3.setState({\n          loggingFailed: true\n        });\n      });\n    } //General failure reaction\n\n  }, {\n    key: \"responseFailure\",\n    value: function responseFailure(response) {\n      console.log(\"DEBUG: RESPONSE ON FAILURE\");\n      console.log(response);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var strings = new LocalizedStrings({\n        en: {\n          fbLogin: 'Login with Facebook',\n          googleLogin: 'Login with Google'\n        },\n        fi: {\n          fbLogin: 'Facebook kirjautuminen',\n          googleLogin: 'Google kirjautuminen'\n        }\n      });\n      strings.setLanguage(this.props.language);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(GoogleLogin, {\n        clientId: config.google.CLIENT_ID,\n        responseType: \"id_token\",\n        className: \"google-login-btn\",\n        onSuccess: this.responseGoogle,\n        onFailure: this.responseFailure,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"logo-icon\",\n        src: require(\"../../../resources/google_logo.svg\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, strings.googleLogin)), React.createElement(FacebookLogin, {\n        appId: config.facebook.APP_ID,\n        fields: \"name,email,picture\",\n        cssClass: \"facebook-login-btn\",\n        icon: React.createElement(FontAwesomeIcon, {\n          className: \"logo-icon\",\n          icon: [\"fab\", \"facebook\"],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }),\n        textButton: strings.fbLogin,\n        callback: this.responseFacebookSuccess,\n        onFailure: this.responseFailure,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SocialLogin;\n}(React.Component);\n\nexport { SocialLogin as default };","map":{"version":3,"sources":["/home/uusi/front4/sipuliton/client/src/modules/login/components/Social_Login.js"],"names":["React","FontAwesomeIcon","Auth","GoogleLogin","FacebookLogin","LocalizedStrings","config","SocialLogin","props","state","username","password","loggingFailed","loggingSucceeded","responseFailure","bind","responseGoogle","responseFacebookSuccess","response","console","log","that","token","tokenObj","id_token","expires","expires_at","federatedSignIn","name","then","credentials","setState","catch","e","accessToken","expiresIn","strings","en","fbLogin","googleLogin","fi","setLanguage","language","google","CLIENT_ID","require","facebook","APP_ID","Component"],"mappings":"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","sourcesContent":["/*\n  This file handles social logins. It covers both facebook and google.\n  It presents the buttons, allows user to log in, authenticates the user \n  and if the user exists, logs them in.\n*/\n\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport '../../../styles/login.css';\n\nimport { Auth } from \"aws-amplify\";\n\nimport GoogleLogin from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login'\nimport LocalizedStrings from 'react-localization';\n\nimport config from \"../../../config.js\"\n\n//Login for Google accounts\nexport default class SocialLogin extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      username:\"\",\n      password:\"\",\n      loggingFailed: false,\n      loggingSucceeded:false,\n    };\n\t\n    this.responseFailure = this.responseFailure.bind(this);\n    this.responseGoogle = this.responseGoogle.bind(this);\n    this.responseFacebookSuccess = this.responseFacebookSuccess.bind(this);\n  }\n  \n  \n  //What to do in case of successful response from Google\n  responseGoogle(response) {\n    console.log(\"DEBUG: RESPONSE FROM GOOGLE ON SUCCESS\")\n    console.log(response);\n    var that = this;\n    //const googleID = response.googleId; //Might not need this    \n    const token = response.tokenObj.id_token;\n    const expires = response.tokenObj.expires_at;\n    \n    console.log(\"IMPORTANT DATA:\");\n    console.log(\"TOKEN: \" + token);\n    console.log(\"EXPIRES: \" + expires);\n\n    //Authenticate at Cognito\n    Auth.federatedSignIn('google', { token, expires_at : expires }, { name: \"USER_NAME\" })\n      .then(credentials => {\n        console.log(\"Auth.federatedSignIn SUCCESS\")\n        console.log('get aws credentials', credentials);\n        this.setState({loggingSucceeded:true});\n        \n      }).catch(e => {\n          \n        //this.setState({loggingFailed:true});\n        console.log(\"Auth.federatedSignIn ERROR\")\n        console.log(e);\n        this.setState({loggingFailed:true});\n      });\n      \n    \n    \n  }\n  \n  //What to do in case of successful response from Facebook\n  responseFacebookSuccess(response) {\n    console.log(\"DEBUG: RESPONSE FROM FACEBOOK ON SUCCESS\")\n    console.log(response);\n    \n    const token = response.accessToken;\n    const expires = response.expiresIn;\n    \n    console.log(\"IMPORTANT DATA:\");\n    console.log(\"TOKEN: \" + token);\n    console.log(\"EXPIRES: \" + expires)\n    \n    Auth.federatedSignIn('facebook', { token, expires_at : expires}, { name: \"USER_NAME\" })\n      .then(credentials => {\n        console.log(\"Auth.federatedSignIn SUCCESS\")\n        console.log('get aws credentials', credentials);\n        this.setState({loggingSucceeded:true});\n        \n      }).catch(e => {\n          \n        //this.setState({loggingFailed:true});\n        console.log(\"Auth.federatedSignIn ERROR\")\n        console.log(e);\n        this.setState({loggingFailed:true});\n      });\n    \n    \n  }\n  \n  //General failure reaction\n  responseFailure(response){\n    console.log(\"DEBUG: RESPONSE ON FAILURE\")\n    console.log(response);\n  }\n   \n  render() {\n    let strings = new LocalizedStrings({\n      en:{\n        fbLogin:'Login with Facebook',\n        googleLogin: 'Login with Google',\n      },\n      fi: {\n        fbLogin: 'Facebook kirjautuminen',\n        googleLogin: 'Google kirjautuminen',\n      }\n    });\n    strings.setLanguage(this.props.language);\n    return (\n      <div>\n        <GoogleLogin\n          clientId={config.google.CLIENT_ID}\n          responseType=\"id_token\"\n          className=\"google-login-btn\"\n          onSuccess={this.responseGoogle}\n          onFailure={this.responseFailure}\n        >\n          {/*<FontAwesomeIcon icon={[\"fab\", \"google\"]}></FontAwesomeIcon>*/}\n          <img className=\"logo-icon\" src={require(\"../../../resources/google_logo.svg\")} />\n          <span>{strings.googleLogin}</span>\n        </GoogleLogin>\n        <FacebookLogin\n          appId={config.facebook.APP_ID}\n          fields=\"name,email,picture\"\n          cssClass=\"facebook-login-btn\"\n          icon={<FontAwesomeIcon className=\"logo-icon\" icon={[\"fab\", \"facebook\"]} />}\n          textButton={strings.fbLogin}\n          callback={this.responseFacebookSuccess}\n          onFailure={this.responseFailure}\n        >\n        </FacebookLogin>\n      </div>\n    );\n  }  \n}"]},"metadata":{},"sourceType":"module"}